 // Fetch home data using react-query with optimized caching
  // const {
  //   data: homeData,
  //   isLoading,
  //   error,
  //   refetch,
  //   isRefetching,
  // } = useQuery({
  //   queryKey: [
  //     "homeData",
  //     selectedDetails?.lat,
  //     selectedDetails?.lng,
  //     selectedDetails?.pincode,
  //   ],
  //   queryFn: async () => {
  //     let lat = selectedDetails?.lat;
  //     let lng = selectedDetails?.lng;
  //     let pin = selectedDetails?.pincode;

  //     if (!lat || !lng || !pin) {
  //       const { status } = await Location.requestForegroundPermissionsAsync();
  //       if (status !== "granted") {
  //         throw new Error("Location permission denied");
  //       }
  //       const location = await Location.getCurrentPositionAsync({});
  //       lat = location.coords.latitude;
  //       lng = location.coords.longitude;

  //       const [address] = await Location.reverseGeocodeAsync({
  //         latitude: lat,
  //         longitude: lng,
  //       });
  //       pin = address.postalCode || "";
  //     }

  //     return fetchHome(lat, lng, pin);
  //   },
  //   // Optimized caching configuration
  //   staleTime: 1000 * 60 * 10, // Data stays fresh for 10 minutes (increased from 5)
  //   gcTime: 1000 * 60 * 30, // Keep in cache for 30 minutes (formerly cacheTime)
  //   enabled: true,
  //   retry: 1,
  //   refetchOnWindowFocus: false, // Don't refetch when app comes back to foreground
  //   refetchOnMount: false, // Don't refetch on component mount if data exists and is fresh
  //   refetchOnReconnect: true, // Only refetch on network reconnect
  //   // Use network-only for first load, then cache-first for subsequent loads
  //   networkMode: 'online',
  // });

  // Fetch home data using react-query with hardcoded values
 